
base_chars = [
3, # character ' ' added manually
0b00000000,
0b00000000,
0b00000000,
0b00000000,
0b00000000,

1, # character !
0b00000001,
0b00000001,
0b00000001,
0b00000000,
0b00000001,
3, # character "
0b00000101,
0b00000101,
0b00000000,
0b00000000,
0b00000000,
4, # character #
0b00001010,
0b00001111,
0b00001010,
0b00001111,
0b00001010,
4, # character $
0b00000111,
0b00001010,
0b00000110,
0b00000101,
0b00001110,
4, # character 0b
0b00001100,
0b00000001,
0b00000110,
0b00001000,
0b00000011,
4, # character &
0b00000100,
0b00001010,
0b00000100,
0b00001010,
0b00000101,
1, # character '
0b00000001,
0b00000001,
0b00000000,
0b00000000,
0b00000000,
2, # character (
0b00000001,
0b00000010,
0b00000010,
0b00000010,
0b00000001,
2, # character )
0b00000010,
0b00000001,
0b00000001,
0b00000001,
0b00000010,
4, # character *
0b00001001,
0b00000110,
0b00001111,
0b00000110,
0b00001001,
3, # character +
0b00000000,
0b00000010,
0b00000111,
0b00000010,
0b00000000,
2, # character ,
0b00000000,
0b00000000,
0b00000000,
0b00000001,
0b00000010,
3, # character -
0b00000000,
0b00000000,
0b00000111,
0b00000000,
0b00000000,
1, # character .
0b00000000,
0b00000000,
0b00000000,
0b00000000,
0b00000001,
3, # character /
0b00000001,
0b00000001,
0b00000010,
0b00000100,
0b00000100,
4, # character 0
0b00000110,
0b00001011,
0b00001101,
0b00001001,
0b00000110,
2, # character 1
0b00000001,
0b00000011,
0b00000001,
0b00000001,
0b00000001,
4, # character 2
0b00000110,
0b00001001,
0b00000010,
0b00000100,
0b00001111,
4, # character 3
0b00001110,
0b00000001,
0b00000110,
0b00000001,
0b00001110,
4, # character 4
0b00001001,
0b00001001,
0b00001111,
0b00000001,
0b00000001,
4, # character 5
0b00001111,
0b00001000,
0b00001110,
0b00000001,
0b00001110,
4, # character 6
0b00000110,
0b00001000,
0b00001110,
0b00001001,
0b00000110,
4, # character 7
0b00001111,
0b00000001,
0b00000010,
0b00000010,
0b00000010,
4, # character 8
0b00000110,
0b00001001,
0b00000110,
0b00001001,
0b00000110,
4, # character 9
0b00000110,
0b00001001,
0b00000111,
0b00000001,
0b00000110,
1, # character :
0b00000000,
0b00000001,
0b00000000,
0b00000001,
0b00000000,
1, # character ;
0b00000000,
0b00000001,
0b00000000,
0b00000001,
0b00000001,
3, # character <
0b00000001,
0b00000010,
0b00000100,
0b00000010,
0b00000001,
3, # character =
0b00000000,
0b00000111,
0b00000000,
0b00000111,
0b00000000,
3, # character >
0b00000100,
0b00000010,
0b00000001,
0b00000010,
0b00000100,
3, # character ?
0b00000110,
0b00000001,
0b00000010,
0b00000000,
0b00000010,
4, # character @
0b00000110,
0b00001001,
0b00001011,
0b00001000,
0b00000111,

4, # character A
0b00000110,
0b00001001,
0b00001111,
0b00001001,
0b00001001,
4, # character B
0b00001110,
0b00001001,
0b00001110,
0b00001001,
0b00001110,
4, # character C
0b00000110,
0b00001001,
0b00001000,
0b00001001,
0b00000110,
4, # character D
0b00001110,
0b00001001,
0b00001001,
0b00001001,
0b00001110,
4, # character E
0b00001111,
0b00001000,
0b00001110,
0b00001000,
0b00001111,
4, # character F
0b00001111,
0b00001000,
0b00001110,
0b00001000,
0b00001000,
4, # character G
0b00000110,
0b00001000,
0b00001011,
0b00001001,
0b00000110,
4, # character H
0b00001001,
0b00001001,
0b00001111,
0b00001001,
0b00001001,
1, # character I
0b00000001,
0b00000001,
0b00000001,
0b00000001,
0b00000001,
4, # character J
0b00000001,
0b00000001,
0b00000001,
0b00001001,
0b00000110,
4, # character K
0b00001001,
0b00001010,
0b00001100,
0b00001010,
0b00001001,
4, # character L
0b00001000,
0b00001000,
0b00001000,
0b00001000,
0b00001111,
4, # character M
0b00001001,
0b00001111,
0b00001001,
0b00001001,
0b00001001,
4, # character N
0b00001001,
0b00001101,
0b00001011,
0b00001001,
0b00001001,
4, # character O
0b00000110,
0b00001001,
0b00001001,
0b00001001,
0b00000110,
4, # character P
0b00001110,
0b00001001,
0b00001110,
0b00001000,
0b00001000,
4, # character Q
0b00000110,
0b00001001,
0b00001001,
0b00001011,
0b00000111,
4, # character R
0b00001110,
0b00001001,
0b00001110,
0b00001010,
0b00001001,
4, # character S
0b00000111,
0b00001000,
0b00000110,
0b00000001,
0b00001110,
3, # character T
0b00000111,
0b00000010,
0b00000010,
0b00000010,
0b00000010,
4, # character U
0b00001001,
0b00001001,
0b00001001,
0b00001001,
0b00000110,
3, # character V
0b00000101,
0b00000101,
0b00000101,
0b00000101,
0b00000010,
4, # character W
0b00001001,
0b00001001,
0b00001001,
0b00001111,
0b00001001,
4, # character X
0b00001001,
0b00001001,
0b00000110,
0b00001001,
0b00001001,
3, # character Y
0b00000101,
0b00000101,
0b00000010,
0b00000010,
0b00000010,
4, # character Z
0b00001111,
0b00000001,
0b00000110,
0b00001000,
0b00001111,

2, # character [
0b00000011,
0b00000010,
0b00000010,
0b00000010,
0b00000011,
3, # character \
0b00000100,
0b00000100,
0b00000010,
0b00000001,
0b00000001,
2, # character ]
0b00000011,
0b00000001,
0b00000001,
0b00000001,
0b00000011,
3, # character ^
0b00000010,
0b00000101,
0b00000000,
0b00000000,
0b00000000,

5, # character _ (added manually)
0b00000000,
0b00000000,
0b00000000,
0b00000000,
0b00011111,

2, # character `
0b00000010,
0b00000001,
0b00000000,
0b00000000,
0b00000000,
]


end_chars = [
3, # character {
0b00000011,
0b00000010,
0b00000110,
0b00000010,
0b00000011,
1, # character |
0b00000001,
0b00000001,
0b00000000,
0b00000001,
0b00000001,
3, # character }
0b00000110,
0b00000010,
0b00000011,
0b00000010,
0b00000110,

5, # character ~ (added manually)
0b00000000,
0b00001000,
0b00010101,
0b00000010,
0b00000000,
]

b_per_glyph = 6


def glyph(c): # returns  -- addr )
    # assumes ascii
    # if outside
    if c < ' ' or c > '~':
        c = '?'
    c = c.upper()
    if c < 'a':
        index = (ord(c)-32) * b_per_glyph
        return base_chars[index], base_chars[index+1:index+b_per_glyph]
    else:
        index = (ord(c)-123) * b_per_glyph
        return end_chars[index], end_chars[index+1:index+b_per_glyph]


def list_glyph(width, glyph):
    print("Width =", width)
    for line in glyph:
        print(bin(line))



